name: CMake
run-name: ${{ github.actor }} is building the project ðŸš€

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
#  workflow_run:
#    workflows: [dependency]
#    types:
#      - success


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  TEST_DIR: "new"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.7" ]

    steps:
    - uses: actions/checkout@v3

    # Install dependency
    - name: Update apt
      run: sudo apt update
    - name: Install Eigen3
      run: sudo apt install -y libeigen3-dev
    - name: Find eigen3 installation location
      run: dpkg -L libeigen3-dev | grep eigen3
    - name: Install Boost
      run: sudo apt-get install libboost-all-dev

    # Update submodules so the missing lsd2 is fixed
    - name: Initialize submodules
      run: git submodule init

    - name: Update submodules
      run: git submodule update --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      # `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#    - name: Test
#      working-directory: ${{github.workspace}}/build
#      # Execute tests defined by the CMake configuration.
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Upload iqtree2 build file
      uses: actions/upload-artifact@v2
      with:
        name: iqtree2
        path: build/iqtree2

  test build file:
    # set up python 3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download iqtree2 build file
      uses: actions/upload-artifact@v2
      with:
        name: iqtree2
        path: ${{env.TEST_DIR}}/bin

    - name: Run test for iqtree2
      run: |
        cd ${{env.TEST_DIR}}
        python3 test1.py

    - name: Display image
      run: echo "![Result](compare result.png)"
#    - name: Upload result for iqtree2
#      uses: actions/upload-artifact@v2
#      with:
#        name: compare_result
#        path: ${{env.TEST_DIR}}/compare result.png


